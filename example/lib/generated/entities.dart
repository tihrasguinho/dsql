// This file is generated by DSQL.
// Do not modify it manually.

part of 'dsql.dart';

class UserEntity {
  final String id;
  final String name;
  final String username;
  final String email;
  final String password;
  final String? image;
  final String? bio;
  final DateTime createdAt;
  final DateTime updatedAt;

  const UserEntity({
    required this.id,
    required this.name,
    required this.username,
    required this.email,
    required this.password,
    this.image,
    this.bio,
    required this.createdAt,
    required this.updatedAt,
  });

  UserEntity copyWith({
    String? id,
    String? name,
    String? username,
    String? email,
    String? password,
    String? image,
    String? bio,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return UserEntity(
      id: id ?? this.id,
      name: name ?? this.name,
      username: username ?? this.username,
      email: email ?? this.email,
      password: password ?? this.password,
      image: image ?? this.image,
      bio: bio ?? this.bio,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'username': username,
      'email': email,
      'password': password,
      'image': image,
      'bio': bio,
      'created_at': createdAt,
      'updated_at': updatedAt,
    };
  }

  String toJson() => json.encode(toMap());

  factory UserEntity.fromMap(Map<String, dynamic> map) {
    return UserEntity(
      id: map['id'] as String,
      name: map['name'] as String,
      username: map['username'] as String,
      email: map['email'] as String,
      password: map['password'] as String,
      image: map['image'] as String,
      bio: map['bio'] as String,
      createdAt: map['created_at'] as DateTime,
      updatedAt: map['updated_at'] as DateTime,
    );
  }

  @override
  String toString() {
    return 'UserEntity(id: $id, name: $name, username: $username, email: $email, password: $password, image: $image, bio: $bio, createdAt: $createdAt, updatedAt: $updatedAt)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is UserEntity &&
        other.id == id &&
        other.name == name &&
        other.username == username &&
        other.email == email &&
        other.password == password &&
        other.image == image &&
        other.bio == bio &&
        other.createdAt == createdAt &&
        other.updatedAt == updatedAt;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        name.hashCode ^
        username.hashCode ^
        email.hashCode ^
        password.hashCode ^
        image.hashCode ^
        bio.hashCode ^
        createdAt.hashCode ^
        updatedAt.hashCode;
  }
}

class PostEntity {
  final String id;
  final String? postId;
  final String content;
  final String userId;
  final DateTime createdAt;
  final DateTime updatedAt;

  const PostEntity({
    required this.id,
    this.postId,
    required this.content,
    required this.userId,
    required this.createdAt,
    required this.updatedAt,
  });

  PostEntity copyWith({
    String? id,
    String? postId,
    String? content,
    String? userId,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return PostEntity(
      id: id ?? this.id,
      postId: postId ?? this.postId,
      content: content ?? this.content,
      userId: userId ?? this.userId,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'post_id': postId,
      'content': content,
      'user_id': userId,
      'created_at': createdAt,
      'updated_at': updatedAt,
    };
  }

  String toJson() => json.encode(toMap());

  factory PostEntity.fromMap(Map<String, dynamic> map) {
    return PostEntity(
      id: map['id'] as String,
      postId: map['post_id'] as String,
      content: map['content'] as String,
      userId: map['user_id'] as String,
      createdAt: map['created_at'] as DateTime,
      updatedAt: map['updated_at'] as DateTime,
    );
  }

  @override
  String toString() {
    return 'PostEntity(id: $id, postId: $postId, content: $content, userId: $userId, createdAt: $createdAt, updatedAt: $updatedAt)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is PostEntity &&
        other.id == id &&
        other.postId == postId &&
        other.content == content &&
        other.userId == userId &&
        other.createdAt == createdAt &&
        other.updatedAt == updatedAt;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        postId.hashCode ^
        content.hashCode ^
        userId.hashCode ^
        createdAt.hashCode ^
        updatedAt.hashCode;
  }
}

class LikeEntity {
  final String id;
  final String postId;
  final String userId;
  final DateTime createdAt;

  const LikeEntity({
    required this.id,
    required this.postId,
    required this.userId,
    required this.createdAt,
  });

  LikeEntity copyWith({
    String? id,
    String? postId,
    String? userId,
    DateTime? createdAt,
  }) {
    return LikeEntity(
      id: id ?? this.id,
      postId: postId ?? this.postId,
      userId: userId ?? this.userId,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'post_id': postId,
      'user_id': userId,
      'created_at': createdAt,
    };
  }

  String toJson() => json.encode(toMap());

  factory LikeEntity.fromMap(Map<String, dynamic> map) {
    return LikeEntity(
      id: map['id'] as String,
      postId: map['post_id'] as String,
      userId: map['user_id'] as String,
      createdAt: map['created_at'] as DateTime,
    );
  }

  @override
  String toString() {
    return 'LikeEntity(id: $id, postId: $postId, userId: $userId, createdAt: $createdAt)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is LikeEntity &&
        other.id == id &&
        other.postId == postId &&
        other.userId == userId &&
        other.createdAt == createdAt;
  }

  @override
  int get hashCode {
    return id.hashCode ^ postId.hashCode ^ userId.hashCode ^ createdAt.hashCode;
  }
}

class FollowerEntity {
  final String id;
  final String followerId;
  final String followingId;
  final DateTime createdAt;

  const FollowerEntity({
    required this.id,
    required this.followerId,
    required this.followingId,
    required this.createdAt,
  });

  FollowerEntity copyWith({
    String? id,
    String? followerId,
    String? followingId,
    DateTime? createdAt,
  }) {
    return FollowerEntity(
      id: id ?? this.id,
      followerId: followerId ?? this.followerId,
      followingId: followingId ?? this.followingId,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'follower_id': followerId,
      'following_id': followingId,
      'created_at': createdAt,
    };
  }

  String toJson() => json.encode(toMap());

  factory FollowerEntity.fromMap(Map<String, dynamic> map) {
    return FollowerEntity(
      id: map['id'] as String,
      followerId: map['follower_id'] as String,
      followingId: map['following_id'] as String,
      createdAt: map['created_at'] as DateTime,
    );
  }

  @override
  String toString() {
    return 'FollowerEntity(id: $id, followerId: $followerId, followingId: $followingId, createdAt: $createdAt)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is FollowerEntity &&
        other.id == id &&
        other.followerId == followerId &&
        other.followingId == followingId &&
        other.createdAt == createdAt;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        followerId.hashCode ^
        followingId.hashCode ^
        createdAt.hashCode;
  }
}
