// This file is generated by DSQL.
// Do not modify it manually.

part of 'dsql.dart';

class UserEntity {
  final String id;
  final String name;
  final String username;
  final String email;
  final String password;
  final String? image;
  final String? bio;
  final DateTime createdAt;
  final DateTime updatedAt;
  final List<PostEntity>? $posts;
  final int? $postsCount;
  final List<LikeEntity>? $likes;
  final int? $likesCount;
  final List<FollowerEntity>? $followers;
  final int? $followersCount;
  final List<FollowerEntity>? $following;
  final int? $followingCount;

  const UserEntity({
    required this.id,
    required this.name,
    required this.username,
    required this.email,
    required this.password,
    this.image,
    this.bio,
    required this.createdAt,
    required this.updatedAt,
    this.$posts,
    this.$postsCount,
    this.$likes,
    this.$likesCount,
    this.$followers,
    this.$followersCount,
    this.$following,
    this.$followingCount,
  });

  UserEntity copyWith({
    String? id,
    String? name,
    String? username,
    String? email,
    String? password,
    String? Function()? image,
    String? Function()? bio,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<PostEntity>? Function()? $posts,
    int? Function()? $postsCount,
    List<LikeEntity>? Function()? $likes,
    int? Function()? $likesCount,
    List<FollowerEntity>? Function()? $followers,
    int? Function()? $followersCount,
    List<FollowerEntity>? Function()? $following,
    int? Function()? $followingCount,
  }) {
    return UserEntity(
      id: id ?? this.id,
      name: name ?? this.name,
      username: username ?? this.username,
      email: email ?? this.email,
      password: password ?? this.password,
      image: image != null ? image() : this.image,
      bio: bio != null ? bio() : this.bio,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      $posts: $posts != null ? $posts() : this.$posts,
      $postsCount: $postsCount != null ? $postsCount() : this.$postsCount,
      $likes: $likes != null ? $likes() : this.$likes,
      $likesCount: $likesCount != null ? $likesCount() : this.$likesCount,
      $followers: $followers != null ? $followers() : this.$followers,
      $followersCount:
          $followersCount != null ? $followersCount() : this.$followersCount,
      $following: $following != null ? $following() : this.$following,
      $followingCount:
          $followingCount != null ? $followingCount() : this.$followingCount,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'username': username,
      'email': email,
      'password': password,
      'image': image,
      'bio': bio,
      'created_at': createdAt,
      'updated_at': updatedAt,
      'posts': $posts?.map((entity) => entity.toMap()).toList(),
      'posts_count': $postsCount,
      'likes': $likes?.map((entity) => entity.toMap()).toList(),
      'likes_count': $likesCount,
      'followers': $followers?.map((entity) => entity.toMap()).toList(),
      'followers_count': $followersCount,
      'following': $following?.map((entity) => entity.toMap()).toList(),
      'following_count': $followingCount,
    };
  }

  String toJson() => json.encode(toMap());

  factory UserEntity.fromMap(Map<String, dynamic> map) {
    return UserEntity(
      id: map['id'] as String,
      name: map['name'] as String,
      username: map['username'] as String,
      email: map['email'] as String,
      password: map['password'] as String,
      image: map['image'] as String,
      bio: map['bio'] as String,
      createdAt: map['created_at'] as DateTime,
      updatedAt: map['updated_at'] as DateTime,
      $posts: List<PostEntity>.from(
        (map['posts'] as List?)?.map(
              (innerMap) => PostEntity.fromMap(innerMap),
            ) ??
            [],
      ),
      $postsCount: map['posts_count'],
      $likes: List<LikeEntity>.from(
        (map['likes'] as List?)?.map(
              (innerMap) => LikeEntity.fromMap(innerMap),
            ) ??
            [],
      ),
      $likesCount: map['likes_count'],
      $followers: List<FollowerEntity>.from(
        (map['followers'] as List?)?.map(
              (innerMap) => FollowerEntity.fromMap(innerMap),
            ) ??
            [],
      ),
      $followersCount: map['followers_count'],
      $following: List<FollowerEntity>.from(
        (map['following'] as List?)?.map(
              (innerMap) => FollowerEntity.fromMap(innerMap),
            ) ??
            [],
      ),
      $followingCount: map['following_count'],
    );
  }

  @override
  String toString() {
    return 'UserEntity(id: $id, name: $name, username: $username, email: $email, password: $password, image: $image, bio: $bio, createdAt: $createdAt, updatedAt: $updatedAt, \$posts: ${$posts}, \$postsCount: ${$postsCount}, \$likes: ${$likes}, \$likesCount: ${$likesCount}, \$followers: ${$followers}, \$followersCount: ${$followersCount}, \$following: ${$following}, \$followingCount: ${$followingCount})';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    bool listEquals(List? a, List? b) {
      if (a == null && b == null) return true;
      if (a?.length != b?.length) return false;
      for (int i = 0; i < (a?.length ?? 0); i++) {
        if (a?[i] != b?[i]) return false;
      }
      return true;
    }

    return other is UserEntity &&
        other.id == id &&
        other.name == name &&
        other.username == username &&
        other.email == email &&
        other.password == password &&
        other.image == image &&
        other.bio == bio &&
        other.createdAt == createdAt &&
        other.updatedAt == updatedAt &&
        listEquals(other.$posts, $posts) &&
        other.$postsCount == $postsCount &&
        listEquals(other.$likes, $likes) &&
        other.$likesCount == $likesCount &&
        listEquals(other.$followers, $followers) &&
        other.$followersCount == $followersCount &&
        listEquals(other.$following, $following) &&
        other.$followingCount == $followingCount;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        name.hashCode ^
        username.hashCode ^
        email.hashCode ^
        password.hashCode ^
        image.hashCode ^
        bio.hashCode ^
        createdAt.hashCode ^
        updatedAt.hashCode ^
        $posts.hashCode ^
        $postsCount.hashCode ^
        $likes.hashCode ^
        $likesCount.hashCode ^
        $followers.hashCode ^
        $followersCount.hashCode ^
        $following.hashCode ^
        $followingCount.hashCode;
  }
}

class PostEntity {
  final String id;
  final String? postId;
  final String content;
  final String userId;
  final DateTime createdAt;
  final DateTime updatedAt;
  final List<PostEntity>? $replies;
  final int? $repliesCount;
  final List<LikeEntity>? $likes;
  final int? $likesCount;
  final PostEntity? $post;
  final UserEntity? $user;

  const PostEntity({
    required this.id,
    this.postId,
    required this.content,
    required this.userId,
    required this.createdAt,
    required this.updatedAt,
    this.$replies,
    this.$repliesCount,
    this.$likes,
    this.$likesCount,
    this.$post,
    this.$user,
  });

  PostEntity copyWith({
    String? id,
    String? Function()? postId,
    String? content,
    String? userId,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<PostEntity>? Function()? $replies,
    int? Function()? $repliesCount,
    List<LikeEntity>? Function()? $likes,
    int? Function()? $likesCount,
    PostEntity? Function()? $post,
    UserEntity? Function()? $user,
  }) {
    return PostEntity(
      id: id ?? this.id,
      postId: postId != null ? postId() : this.postId,
      content: content ?? this.content,
      userId: userId ?? this.userId,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      $replies: $replies != null ? $replies() : this.$replies,
      $repliesCount:
          $repliesCount != null ? $repliesCount() : this.$repliesCount,
      $likes: $likes != null ? $likes() : this.$likes,
      $likesCount: $likesCount != null ? $likesCount() : this.$likesCount,
      $post: $post != null ? $post() : this.$post,
      $user: $user != null ? $user() : this.$user,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'post_id': postId,
      'content': content,
      'user_id': userId,
      'created_at': createdAt,
      'updated_at': updatedAt,
      'replies': $replies?.map((entity) => entity.toMap()).toList(),
      'replies_count': $repliesCount,
      'likes': $likes?.map((entity) => entity.toMap()).toList(),
      'likes_count': $likesCount,
      'post': $post?.toMap(),
      'user': $user?.toMap(),
    };
  }

  String toJson() => json.encode(toMap());

  factory PostEntity.fromMap(Map<String, dynamic> map) {
    return PostEntity(
      id: map['id'] as String,
      postId: map['post_id'] as String,
      content: map['content'] as String,
      userId: map['user_id'] as String,
      createdAt: map['created_at'] as DateTime,
      updatedAt: map['updated_at'] as DateTime,
      $replies: List<PostEntity>.from(
        (map['replies'] as List?)?.map(
              (innerMap) => PostEntity.fromMap(innerMap),
            ) ??
            [],
      ),
      $repliesCount: map['replies_count'],
      $likes: List<LikeEntity>.from(
        (map['likes'] as List?)?.map(
              (innerMap) => LikeEntity.fromMap(innerMap),
            ) ??
            [],
      ),
      $likesCount: map['likes_count'],
      $post: map['post'] != null ? PostEntity.fromMap(map['post']) : null,
      $user: map['user'] != null ? UserEntity.fromMap(map['user']) : null,
    );
  }

  @override
  String toString() {
    return 'PostEntity(id: $id, postId: $postId, content: $content, userId: $userId, createdAt: $createdAt, updatedAt: $updatedAt, \$replies: ${$replies}, \$repliesCount: ${$repliesCount}, \$likes: ${$likes}, \$likesCount: ${$likesCount}, \$post: ${$post}, \$user: ${$user})';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    bool listEquals(List? a, List? b) {
      if (a == null && b == null) return true;
      if (a?.length != b?.length) return false;
      for (int i = 0; i < (a?.length ?? 0); i++) {
        if (a?[i] != b?[i]) return false;
      }
      return true;
    }

    return other is PostEntity &&
        other.id == id &&
        other.postId == postId &&
        other.content == content &&
        other.userId == userId &&
        other.createdAt == createdAt &&
        other.updatedAt == updatedAt &&
        listEquals(other.$replies, $replies) &&
        other.$repliesCount == $repliesCount &&
        listEquals(other.$likes, $likes) &&
        other.$likesCount == $likesCount &&
        other.$post == $post &&
        other.$user == $user;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        postId.hashCode ^
        content.hashCode ^
        userId.hashCode ^
        createdAt.hashCode ^
        updatedAt.hashCode ^
        $replies.hashCode ^
        $repliesCount.hashCode ^
        $likes.hashCode ^
        $likesCount.hashCode ^
        $post.hashCode ^
        $user.hashCode;
  }
}

class LikeEntity {
  final String id;
  final String postId;
  final String userId;
  final DateTime createdAt;
  final PostEntity? $post;
  final UserEntity? $user;

  const LikeEntity({
    required this.id,
    required this.postId,
    required this.userId,
    required this.createdAt,
    this.$post,
    this.$user,
  });

  LikeEntity copyWith({
    String? id,
    String? postId,
    String? userId,
    DateTime? createdAt,
    PostEntity? Function()? $post,
    UserEntity? Function()? $user,
  }) {
    return LikeEntity(
      id: id ?? this.id,
      postId: postId ?? this.postId,
      userId: userId ?? this.userId,
      createdAt: createdAt ?? this.createdAt,
      $post: $post != null ? $post() : this.$post,
      $user: $user != null ? $user() : this.$user,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'post_id': postId,
      'user_id': userId,
      'created_at': createdAt,
      'post': $post?.toMap(),
      'user': $user?.toMap(),
    };
  }

  String toJson() => json.encode(toMap());

  factory LikeEntity.fromMap(Map<String, dynamic> map) {
    return LikeEntity(
      id: map['id'] as String,
      postId: map['post_id'] as String,
      userId: map['user_id'] as String,
      createdAt: map['created_at'] as DateTime,
      $post: map['post'] != null ? PostEntity.fromMap(map['post']) : null,
      $user: map['user'] != null ? UserEntity.fromMap(map['user']) : null,
    );
  }

  @override
  String toString() {
    return 'LikeEntity(id: $id, postId: $postId, userId: $userId, createdAt: $createdAt, \$post: ${$post}, \$user: ${$user})';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is LikeEntity &&
        other.id == id &&
        other.postId == postId &&
        other.userId == userId &&
        other.createdAt == createdAt &&
        other.$post == $post &&
        other.$user == $user;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        postId.hashCode ^
        userId.hashCode ^
        createdAt.hashCode ^
        $post.hashCode ^
        $user.hashCode;
  }
}

class FollowerEntity {
  final String id;
  final String followerId;
  final String followingId;
  final DateTime createdAt;
  final UserEntity? $follower;
  final UserEntity? $following;

  const FollowerEntity({
    required this.id,
    required this.followerId,
    required this.followingId,
    required this.createdAt,
    this.$follower,
    this.$following,
  });

  FollowerEntity copyWith({
    String? id,
    String? followerId,
    String? followingId,
    DateTime? createdAt,
    UserEntity? Function()? $follower,
    UserEntity? Function()? $following,
  }) {
    return FollowerEntity(
      id: id ?? this.id,
      followerId: followerId ?? this.followerId,
      followingId: followingId ?? this.followingId,
      createdAt: createdAt ?? this.createdAt,
      $follower: $follower != null ? $follower() : this.$follower,
      $following: $following != null ? $following() : this.$following,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'follower_id': followerId,
      'following_id': followingId,
      'created_at': createdAt,
      'follower': $follower?.toMap(),
      'following': $following?.toMap(),
    };
  }

  String toJson() => json.encode(toMap());

  factory FollowerEntity.fromMap(Map<String, dynamic> map) {
    return FollowerEntity(
      id: map['id'] as String,
      followerId: map['follower_id'] as String,
      followingId: map['following_id'] as String,
      createdAt: map['created_at'] as DateTime,
      $follower:
          map['follower'] != null ? UserEntity.fromMap(map['follower']) : null,
      $following: map['following'] != null
          ? UserEntity.fromMap(map['following'])
          : null,
    );
  }

  @override
  String toString() {
    return 'FollowerEntity(id: $id, followerId: $followerId, followingId: $followingId, createdAt: $createdAt, \$follower: ${$follower}, \$following: ${$following})';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is FollowerEntity &&
        other.id == id &&
        other.followerId == followerId &&
        other.followingId == followingId &&
        other.createdAt == createdAt &&
        other.$follower == $follower &&
        other.$following == $following;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        followerId.hashCode ^
        followingId.hashCode ^
        createdAt.hashCode ^
        $follower.hashCode ^
        $following.hashCode;
  }
}
