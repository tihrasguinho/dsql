// This file is generated by DSQL.
// Do not modify it manually.

part of 'dsql.dart';

class UserEntity {
  final String id;
  final String name;
  final String username;
  final String email;
  final String password;
  final String? image;
  final String? bio;
  final String? website;
  final DateTime createdAt;
  final DateTime updatedAt;
  final List<PostEntity> posts;
  final List<LikeEntity> likes;
  final List<FollowerEntity> followers;
  final List<FollowerEntity> following;

  const UserEntity({
    required this.id,
    required this.name,
    required this.username,
    required this.email,
    required this.password,
    this.image,
    this.bio,
    this.website,
    required this.createdAt,
    required this.updatedAt,
    this.posts = const <PostEntity>[],
    this.likes = const <LikeEntity>[],
    this.followers = const <FollowerEntity>[],
    this.following = const <FollowerEntity>[],
  });

  UserEntity copyWith({
    String? id,
    String? name,
    String? username,
    String? email,
    String? password,
    String? image,
    String? bio,
    String? website,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<PostEntity>? posts,
    List<LikeEntity>? likes,
    List<FollowerEntity>? followers,
    List<FollowerEntity>? following,
  }) {
    return UserEntity(
      id: id ?? this.id,
      name: name ?? this.name,
      username: username ?? this.username,
      email: email ?? this.email,
      password: password ?? this.password,
      image: image ?? this.image,
      bio: bio ?? this.bio,
      website: website ?? this.website,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      posts: posts ?? this.posts,
      likes: likes ?? this.likes,
      followers: followers ?? this.followers,
      following: following ?? this.following,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'username': username,
      'email': email,
      'password': password,
      'image': image,
      'bio': bio,
      'website': website,
      'created_at': createdAt,
      'updated_at': updatedAt,
    };
  }

  String toJson() => json.encode(toMap());

  factory UserEntity.fromMap(Map<String, dynamic> map) {
    return UserEntity(
      id: map['id'] as String,
      name: map['name'] as String,
      username: map['username'] as String,
      email: map['email'] as String,
      password: map['password'] as String,
      image: map['image'] as String,
      bio: map['bio'] as String,
      website: map['website'] as String,
      createdAt: map['created_at'] as DateTime,
      updatedAt: map['updated_at'] as DateTime,
    );
  }
}

class PostEntity {
  final String id;
  final String? postId;
  final String title;
  final String body;
  final String ownerId;
  final DateTime createdAt;
  final DateTime updatedAt;
  final List<PostEntity> replies;
  final List<LikeEntity> likes;

  const PostEntity({
    required this.id,
    this.postId,
    required this.title,
    required this.body,
    required this.ownerId,
    required this.createdAt,
    required this.updatedAt,
    this.replies = const <PostEntity>[],
    this.likes = const <LikeEntity>[],
  });

  PostEntity copyWith({
    String? id,
    String? postId,
    String? title,
    String? body,
    String? ownerId,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<PostEntity>? replies,
    List<LikeEntity>? likes,
  }) {
    return PostEntity(
      id: id ?? this.id,
      postId: postId ?? this.postId,
      title: title ?? this.title,
      body: body ?? this.body,
      ownerId: ownerId ?? this.ownerId,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      replies: replies ?? this.replies,
      likes: likes ?? this.likes,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'post_id': postId,
      'title': title,
      'body': body,
      'owner_id': ownerId,
      'created_at': createdAt,
      'updated_at': updatedAt,
    };
  }

  String toJson() => json.encode(toMap());

  factory PostEntity.fromMap(Map<String, dynamic> map) {
    return PostEntity(
      id: map['id'] as String,
      postId: map['post_id'] as String,
      title: map['title'] as String,
      body: map['body'] as String,
      ownerId: map['owner_id'] as String,
      createdAt: map['created_at'] as DateTime,
      updatedAt: map['updated_at'] as DateTime,
    );
  }
}

class LikeEntity {
  final String id;
  final String postId;
  final String userId;
  final DateTime createdAt;

  const LikeEntity({
    required this.id,
    required this.postId,
    required this.userId,
    required this.createdAt,
  });

  LikeEntity copyWith({
    String? id,
    String? postId,
    String? userId,
    DateTime? createdAt,
  }) {
    return LikeEntity(
      id: id ?? this.id,
      postId: postId ?? this.postId,
      userId: userId ?? this.userId,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'post_id': postId,
      'user_id': userId,
      'created_at': createdAt,
    };
  }

  String toJson() => json.encode(toMap());

  factory LikeEntity.fromMap(Map<String, dynamic> map) {
    return LikeEntity(
      id: map['id'] as String,
      postId: map['post_id'] as String,
      userId: map['user_id'] as String,
      createdAt: map['created_at'] as DateTime,
    );
  }
}

class FollowerEntity {
  final String id;
  final String followerId;
  final String followingId;
  final DateTime createdAt;

  const FollowerEntity({
    required this.id,
    required this.followerId,
    required this.followingId,
    required this.createdAt,
  });

  FollowerEntity copyWith({
    String? id,
    String? followerId,
    String? followingId,
    DateTime? createdAt,
  }) {
    return FollowerEntity(
      id: id ?? this.id,
      followerId: followerId ?? this.followerId,
      followingId: followingId ?? this.followingId,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'follower_id': followerId,
      'following_id': followingId,
      'created_at': createdAt,
    };
  }

  String toJson() => json.encode(toMap());

  factory FollowerEntity.fromMap(Map<String, dynamic> map) {
    return FollowerEntity(
      id: map['id'] as String,
      followerId: map['follower_id'] as String,
      followingId: map['following_id'] as String,
      createdAt: map['created_at'] as DateTime,
    );
  }
}
